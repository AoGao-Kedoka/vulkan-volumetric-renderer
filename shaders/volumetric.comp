#version 450
#extension GL_EXT_debug_printf : enable

#include "utils.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// contains sdf value and gradient but also particle color
struct LiquiSDD {
    float val;
    vec3 grad;
    vec3 col;
};

/* SHADER PARAMS */
// particles
int particleCount = 64;      // particle count
// light data
vec3 lightColor = vec3(1,1,1);         // light color
vec3 ambientLight = vec3(1,1,1);       // ambient light color
float ambientFactor = 0.25;            // intensity of ambient light
float diffuseFactor = 1.0;             // intensity of diffuse light
float specularFactor = 0.25;            // intensity of specular light
float intensity = 32.0;                 // more intensity, means more energy, giving it more reach
// liquid properties
float density = 0.25;               // global density of liquid, used to determine step size and beer lambert calculation
float viscosity = 1.75;             // determines how close particles need to be until they (dis)connect
float refractionFactor = 1.33;      // refraction factor of the liquid (water = 1.33, air = 1.0)
float waterShininess = 20.0;       // determines the shininess in the specular term for water
float energyAbsorption = 0.03;      // water absorption coefficient
// sky properties
vec3 skyColor = vec3(0.0, 0.0, 1.0);    // the color of the cloudless sky

// create sdf for a sphere
// (sdf.x, gradient.yzw)
LiquiSDD sdSphere(in vec3 p, in vec3 c, in float r, in vec3 color)
{
    LiquiSDD liquid;
    liquid.val = length(p - c) - r;
    liquid.grad = normalize(p - c);
    liquid.col = color;
    return liquid;
}

LiquiSDD sdDisplacement(in vec3 p, in LiquiSDD liq, in float height)
{
    // add some animation
    float frequencyX = 8.0 + sin(ubo.totalTime), frequencyY = 9.0 + sin(ubo.totalTime), frequencyZ = 8.5 + sin(ubo.totalTime * 2.);
    LiquiSDD liquid;
    liquid.val = liq.val + (1. - pow(sin((p.x + 3.) * frequencyX) * sin((p.y + 3.) * frequencyY) * sin((p.z + 3.) * frequencyZ), 2.)) * height;
    float outer = -2. * sin((p.x + 3.) * frequencyX) * sin((p.y + 3.) * frequencyY) * sin((p.z + 3.) * frequencyZ) * height;
    float gradX = outer * frequencyX * cos((p.x + 3.) * frequencyX) * sin((p.y + 3.) * frequencyY) * sin((p.z + 3.) * frequencyZ);
    float gradY = outer * frequencyY * sin((p.x + 3.) * frequencyX) * cos((p.y + 3.) * frequencyY) * sin((p.z + 3.) * frequencyZ);
    float gradZ = outer * frequencyZ * sin((p.x + 3.) * frequencyX) * sin((p.y + 3.) * frequencyY) * cos((p.z + 3.) * frequencyZ);
    liquid.grad = normalize(liq.grad + vec3(gradX, gradY, gradZ));
    liquid.col = liq.col;
    return liquid;
}

// combine two sdfs with union
LiquiSDD sdUnion(in LiquiSDD liq1, in LiquiSDD liq2)
{
    LiquiSDD res;
    res.val = min(liq1.val, liq2.val);
    res.grad = (liq1.val < liq2.val) ? liq1.grad : liq2.grad;
    res.col = (liq1.val < liq2.val) ? liq1.col : liq2.col;
    return res;
}


LiquiSDD sdSmoothUnion(in LiquiSDD liq1, in LiquiSDD liq2, in float k, in float n)
{
    LiquiSDD res;
    vec2 smoothRes = sminN(liq1.val, liq2.val, k, n);
    res.val = smoothRes.x;
    res.grad = normalize(mix(liq1.grad, liq2.grad, smoothRes.y));
    res.col = mix(liq1.col, liq2.col, smoothRes.y);
    return res;
}

LiquiSDD sdWater(in vec3 pos){
    LiquiSDD liquid;
    vec3 waterColor = vec3(0.0,0.01,0.25);
    float dis = pos.y + 0.1;
    float amp = 0.5;
    float freq = 1.0;
    float iterations = 4.0;
    float t = ubo.totalTime;
    
    // Use FBM for main wave shapes
    for (float i = 0.0; i < iterations; i += 1.0) {
        dis += amp * sin(pos.x * freq + i * amp + t * i) * 
                     sin(pos.y * freq + i * amp + t * i) *
                     sin(pos.z * freq + -i * amp + t * i);
        
        amp *= 0.5;
        freq *= 2.0;
    }
    
    // Use noise fbm to add irregular waves
    dis += fbm(pos.xyz * 1.25, 2);
    
    // Use texture for finer wave details
    //float texAmp = 0.1 * sin(pos.x * pos.z);
    //float texFreq = 2.0 + 0.2 * pos.z;
    //float texOffset = ubo.totalTime * 0.05;
    //dis += texture(noiseTexture, pos.xz / texFreq + texOffset).r * texAmp * 0.8;
    liquid.val = -dis;
    liquid.grad = vec3(0,0,0);
    liquid.col = waterColor;
    return liquid;
}

LiquiSDD map(in vec3 p);

vec3 calcNormal( in vec3 p )
{
    float dis = map(p).val;
    vec2 val = vec2(0.01, 0.0);

    vec3 normal = dis - vec3(map(p - val.xyy).val,
                             map(p - val.yxy).val,
                             map(p - val.yyx).val);
    return normalize(normal);
}

float Caustic(vec3 position){
    float noise = 20 * fbm_4(position / 15.0 + ubo.totalTime / 3.0);
    float waterNoise = fract(noise);
    float causticMultiplier = 7.0;
    return causticMultiplier * 0.027 *  pow(
                smoothVoronoi(position.xz / 4.0 +
                          vec2(ubo.totalTime, ubo.totalTime+ 3.0) +
                          3.0 * vec2(cos(waterNoise), sin(waterNoise))), 5.0);
}

float diffuse(vec3 n,vec3 l,float p) {
    return pow(dot(n,l) * 0.4 + 0.6,p);
}
float specular(vec3 n,vec3 l,vec3 e,float s) {
    float nrm = (s + 8.0) / (PI * 8.0);
    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;
}
// sky
vec3 getSkyColor(vec3 e) {
    e.y = (max(e.y,0.0)*0.8+0.2)*0.8;
    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4) * 1.1;
}

/**
Copyrights to TDM https://www.shadertoy.com/view/Ms2SD1
*/
vec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {
    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);
    fresnel = min(pow(fresnel,3.0), 0.5);
    const vec3 SEA_BASE = vec3(0.0,0.09,0.18);
    const vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6)*0.6;
    vec3 reflected = getSkyColor(reflect(eye,n));
    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12;

    vec3 color = mix(refracted,reflected,fresnel);
    const float SEA_HEIGHT = 0.6;

    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);
    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;

    color += vec3(specular(n,l,eye,60.0));

    return color;
}


// This is where we create our SDF and sample it with the current position
LiquiSDD map(in vec3 p)
{
    // there seems to be something wrong with the particle buffer so let's do it manually
    // 5x5 grid of particles/spheres moving up and down
    vec3 waterColor = vec3(0.0,0.125,0.5);

    LiquiSDD liq;
    if (ubo.particleBasedFluid == 1){
        float particleSize = 0.66;
        liq = sdSphere(p, vec3(-2.,cos(ubo.totalTime+4.)*0.25,-2.), particleSize, waterColor);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-1.,cos(ubo.totalTime+3.)*0.25,-2.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(0,cos(ubo.totalTime+2.)*0.25,-2.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(1.,cos(ubo.totalTime+3.)*0.25,-2.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(2.,cos(ubo.totalTime+4.)*0.25,-2.), particleSize, waterColor), 0.5, viscosity);

        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-2.,cos(ubo.totalTime+3.)*0.25,-1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-1.,cos(ubo.totalTime+2.)*0.25,-1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(0,cos(ubo.totalTime+1.)*0.25,-1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(1.,cos(ubo.totalTime+2.)*0.25,-1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(2.,cos(ubo.totalTime+3.)*0.25,-1.), particleSize, waterColor), 0.5, viscosity);

        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-2.,cos(ubo.totalTime+2.)*0.25,0.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-1.,cos(ubo.totalTime+1.)*0.25,0.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(0, cos(ubo.totalTime)*0.25,0.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(1.,cos(ubo.totalTime+1.)*0.25,0.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(2.,cos(ubo.totalTime+2.)*0.25,0.), particleSize, waterColor), 0.5, viscosity);

        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-2.,cos(ubo.totalTime+3.)*0.25,1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-1.,cos(ubo.totalTime+2.)*0.25,1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(0,cos(ubo.totalTime+1.)*0.25,1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(1.,cos(ubo.totalTime+2.)*0.25,1.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(2.,cos(ubo.totalTime+3.)*0.25,1.), particleSize, waterColor), 0.5, viscosity);

        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-2.,cos(ubo.totalTime+4.)*0.25,2.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(-1.,cos(ubo.totalTime+3.)*0.25,2.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(0,cos(ubo.totalTime+2.)*0.25,2.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(1.,cos(ubo.totalTime+3.)*0.25,2.), particleSize, waterColor), 0.5, viscosity);
        liq = sdSmoothUnion(liq, sdSphere(p, vec3(2.,cos(ubo.totalTime+4.)*0.25,2.), particleSize, waterColor), 0.5, viscosity);
    } else {
        liq = sdWater(p - vec3(0, 1, 0));
    }
    return liq;
/*
    // start with the first particle
    LiquiSDD liq = sdSphere(p, particles[0].position.xyz, particles[0].position.w, particles[0].color.rgb);
    // how many particles?
    // combining all particles
    for(int i = 1; i < particleCount; i++)
    {
        // note, the k and n value change how smoothmin behaves, these values also allow us to simulate the viscosity
        // higher n means it can stretch further
        liq = sdSmoothUnion(liq, sdSphere(p, particles[i].position.xyz, particles[1].position.w, particles[i].color.rgb), 0.5, viscosity);
    }
    return liq;*/
 }

vec3 ray_march(in vec3 ro, in vec3 rd)
{
    float total_distance_traveled = 0.0;
    float curr_distance_traveled = 0.0;
    const int NUMBER_OF_STEPS = 100;
    const float MINIMUM_HIT_DISTANCE = 0.001;
    const float MAXIMUM_TRACE_DISTANCE = 20.0;

    float unabsorbedEnergy = 1.f;

    vec3 color = vec3(0,0,0);
    bool inside = false;

    for (int i = 0; i < NUMBER_OF_STEPS; ++i)
    {
        vec3 current_position = ro + curr_distance_traveled * rd;

        LiquiSDD liq = map(current_position);
        if (ubo.particleBasedFluid == 0) liq.grad = calcNormal(current_position);
        float distance_to_closest = liq.val;

        if (distance_to_closest < MINIMUM_HIT_DISTANCE)
        { 
            // entered first time
            if(!inside)
            {
                curr_distance_traveled = 0.0;
                // we now go down a new ray, the refracted ray, so we need to update our origin position
                ro = current_position;
                // refraction param: air=1.0, water=1.33, curr_medium / next_medium
                rd = refract(rd, liq.grad, 1. / refractionFactor);
                inside = true;
                if (ubo.particleBasedFluid ==1){
                    vec3 reflection = reflect(rd, liq.grad);
                    color += specularFactor * pow(max(0., dot(reflection, normalize(ubo.sunPosition - current_position))), waterShininess) * lightColor;
                }
            }
            float prevRestEnergy = unabsorbedEnergy;
            unabsorbedEnergy *= BeersLaw(energyAbsorption, density);

            total_distance_traveled += density;
            curr_distance_traveled += density;
            float absorptionThisStep = prevRestEnergy - unabsorbedEnergy;
            // diffuse light
            float distToLight = length(ubo.sunPosition - current_position);
            vec3 currLightColor = lightColor * intensity / distToLight; // attenuation function: 1/dist

            if (ubo.particleBasedFluid == 1) color += diffuseFactor * liq.col * currLightColor * absorptionThisStep;
            else{
                color = mix(
                    getSkyColor(rd),
                    getSeaColor(current_position,liq.grad,normalize(currLightColor),rd,ubo.sunPosition - current_position),
                    pow(smoothstep(0.0,-0.02,rd.y),0.2)
                );
            }
            color += ambientFactor * liq.col * ambientLight * absorptionThisStep;
            if(unabsorbedEnergy <= 0.f) 
            {
                break;
            }
        }
        else if( total_distance_traveled > MAXIMUM_TRACE_DISTANCE)
        {
            if(unabsorbedEnergy == 1.0)
            {
                // if this ray didn't go through liquid make it sky color
                return getSkyColor(rd);
            }
            else
            {
                // if the ray did go through liquid reduce the effect the sky has on the color
                return color + (unabsorbedEnergy) * getSkyColor(rd);
            }
        }
        else
        {
            total_distance_traveled += distance_to_closest;
            curr_distance_traveled += distance_to_closest;
            // refract when leaving
            if(inside)
            {
                // we now go down a new ray, the refracted ray, so we need to update our origin position
                ro = current_position;
                // refraction param: air=1.0, water=1.33, curr_medium / next_medium
                rd = refract(rd, liq.grad, 1. / refractionFactor);
                inside = false;
            }
        }
        
    }
    return color;
}

void main() {
    vec2 screenSize = imageSize(storageTexture);
    float horizontalCoefficient = (2.0 * float(gl_GlobalInvocationID.x) / screenSize.x) - 1.0;
    float verticalCoefficient = (2.0 * float(gl_GlobalInvocationID.y) / screenSize.y) - 1.0;

    vec3 ro = ubo.cameraPosition;
    vec3 rd = normalize(vec3(horizontalCoefficient, verticalCoefficient, -1.0));
    vec3 axis = vec3(0,1,0);
    float angle = ubo.rotationAngle;
    rd = rotateVector(rd, axis, angle);

    vec3 color = ray_march(ro, rd);

    imageStore(storageTexture, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}