#version 450
#extension GL_EXT_debug_printf : enable

#include "utils.glsl"

#define MAX_STEPS 200
const float Tmin = 0.5;
const float Tmax = 10;
const float Ka  = 0.2;
const float MARCH_SIZE = 0.08;

#define MAX_STEPS_LIGHTS 6
#define ABSORPTION_COEFFICIENT 0.9
#define SCATTERING_ANISO 0.3
#define PARTICLE_COUNT 5

// soft shadow
const int K  = 32;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

float scene(vec3 p, inout int flag);


vec3 calcNormal(in vec3  p)
{
    const float h = 0.0001;
    const vec2 k = vec2(1, -1);
    int flag = 0;
    return normalize(k.xyy*scene(p + k.xyy*h, flag) +
    k.yyx*scene(p + k.yyx*h, flag) +
    k.yxy*scene(p + k.yxy*h, flag) +
    k.xxx*scene(p + k.xxx*h, flag));
}

// flag: 0 = ground, 1 = smoke
float scene(vec3 p, inout int flag) {
   float distance = sdSphere(p + particles[0].position.xyz, particles[0].position.w);
    for (int i = 1; i < PARTICLE_COUNT; ++i){
       float d = sdSphere(p + particles[i].position.xyz, particles[i].position.w);
       distance = opSmoothUnion(d, distance, 2);
    }

    float overlap = min(distance, sdPlane(p, vec3(0, -0.5, 0), 3));

    if (overlap == distance) {
        flag = 1;// Flag indicating the point is above the ground
    } else {
        flag = 0;// Flag indicating the point is on or below the ground
    }

    distance = overlap;

    // Add noise only when above the ground
    if (flag == 1) {
        vec3 fbmCoord = (p + 2 * vec3(ubo.totalTime * 0.5, 0.0, ubo.totalTime * 0.5)) / 1.5;
        float f = 5.0 * fbm(fbmCoord / 3.2, 6);
        return -distance + fbm(p, 6);
    } else {
        return -distance;
    }
}

float lightmarch(vec3 position, vec3 rayDirection, int flag) {
    vec3 sunDirection = normalize(ubo.sunPosition);
    float totalDensity = 0.0;
    float marchSize = 0.03;

    for (int step = 0; step < MAX_STEPS_LIGHTS; step++) {
        position += sunDirection * marchSize * float(step);

        float lightSample = scene(position, flag);
        totalDensity += lightSample;
        if (flag == 0) {
            return BeersLaw(totalDensity, ABSORPTION_COEFFICIENT);
        }
    }

    float transmittance = BeersLaw(totalDensity, ABSORPTION_COEFFICIENT);
    return transmittance;
}

float softshadow(in vec3 ro, in vec3 rd)
{
    float res = 1.0;
    int flag  = 0;
    for (float t=Tmin; t<Tmax;)
    {
        float h = -scene(ro + rd*t, flag);
        if (h<0.001)
        return 0.0;
        res = min(res, K*h/t);
        t += h;
    }
    return res;
}

float raymarch(vec3 rayOrigin, vec3 rayDirection, float offset) {
    int flag = 0;
    float depth = 0.0;
    depth += MARCH_SIZE * offset;
    vec3 p = rayOrigin + depth * rayDirection;
    vec3 sunDirection = normalize(ubo.sunPosition);

    float totalTransmittance = 1.0;
    float lightEnergy = 0.0;

    float phase = HenyeyGreenstein(SCATTERING_ANISO, dot(rayDirection, sunDirection));

    for (int i = 0; i < MAX_STEPS; i++) {
        float density = scene(p, flag);

        // We only draw the density if it's greater than 0
        if (density > 0.0) {
            float lightTransmittance = lightmarch(p, rayDirection, flag);
            float luminance = 0.025 + density * phase;
            float sd = softshadow(p, normalize(ubo.sunPosition - p));

            totalTransmittance *= lightTransmittance;
            if (flag == 0) {
                lightEnergy += totalTransmittance * sd * 0.5 * density;
            } else {
                lightEnergy += totalTransmittance * luminance * sd * 0.5;
            }
        }

        depth += MARCH_SIZE;
        p = rayOrigin + depth * rayDirection;
    }

    return clamp(lightEnergy, 0.0, 1.0);
}

void main() {
    vec2 screenSize = imageSize(storageTexture);
    float horizontalCoefficient = (2.0 * float(gl_GlobalInvocationID.x) / screenSize.x) - 1.0;
    float verticalCoefficient = (2.0 * float(gl_GlobalInvocationID.y) / screenSize.y) - 1.0;

    // hard coded camera position
    vec3 ro = ubo.cameraPosition;
    vec3 rd = normalize(vec3(horizontalCoefficient, verticalCoefficient, -1.0));
    vec3 axis = vec3(0,1,0);
    float angle = ubo.rotationAngle;
    rd = rotateVector(rd, axis, angle);

    // Sun and Sky
    vec3 sunColor = vec3(1.0, 0.8, 0.6);
    vec3 sunDirection = normalize(ubo.sunPosition);
    float sun = clamp(dot(sunDirection, rd), 0.0, 1.0);
    // Base sky color
    vec3 color = vec3(0.7, 0.7, 0.90);
    // Add vertical gradient
    color -= 0.4 * vec3(0.90, 0.75, 0.90) * rd.y;
    // Add sun color to sky
    color += 0.5 * vec3(1.0, 0.5, 0.3) * pow(sun, 10.0);
    float blueNoise = texture(blueNoiseTexture, gl_GlobalInvocationID.xy / 1024).r;
    float offset = fract(blueNoise + float(ubo.frame % 32) / sqrt(0.5));

    // Cloud
    float res = raymarch(ro, rd, offset);
    color = color + sunColor * res;
    color = pow(color, vec3(1.8));
    imageStore(storageTexture, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}
