#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_debug_printf : enable

#define MAX_STEPS 60
const float Tmin = 1;
const float Tmax = 1000;
const float Ka  = 0.2;
const float MARCH_SIZE = 0.16;

#define MAX_STEPS_LIGHTS 6
#define ABSORPTION_COEFFICIENT 0.9
#define SCATTERING_ANISO 0.3
#define PI 3.14159265359
#define EPSILON 0.0001

// soft shadow
const int K  = 32;

struct Particle {
    vec4 position;
    vec3 velocity;
    vec4 color;
};

layout(binding = 0, rgba8) uniform image2D storageTexture;

layout (binding = 1) uniform ParameterUBO {
    float deltaTime;
    float totalTime;
    vec3 sunPosition;
    vec3 cameraPosition;
    int frame;
} ubo;

layout(std140, binding = 2) buffer ParticleSSBO {
    Particle particles[];
};

layout(binding = 3) uniform sampler2D noiseTexture;
layout(binding = 4) uniform sampler2D blueNoiseTexture;


layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;


float sdSphere(vec3 p, float radius) {
    return length(p) - radius;
}

float BeersLaw (float dist, float absorption) {
    return exp(-dist * absorption);
}

float scene(vec3 p, inout int flag);

float sdPlane(vec3 p, vec3 n, float h)
{
    // n must be normalized
    return dot(p, n) + h;
}

float HenyeyGreenstein(float g, float mu) {
    float gg = g * g;
    return (1.0 / (4.0 * PI))  * ((1.0 - gg) / pow(1.0 + gg - 2.0 * g * mu, 1.5));
}

float sdRoundBox(vec3 p, vec3 b, float r)
{
    vec3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}

vec3 calcNormal(in vec3  p)
{
    const float h = 0.0001;
    const vec2 k = vec2(1, -1);
    int flag = 0;
    return normalize(k.xyy*scene(p + k.xyy*h, flag) +
    k.yyx*scene(p + k.yyx*h, flag) +
    k.yxy*scene(p + k.yxy*h, flag) +
    k.xxx*scene(p + k.xxx*h, flag));
}

// --------------------------------------------//
//               Noise Functions
// --------------------------------------------//
// Taken from Inigo Quilez's Rainforest ShaderToy:
// https://www.shadertoy.com/view/4ttSWf
float hash1(float n)
{
    return fract(n*17.0*fract(n*0.3183099));
}

// Taken from Inigo Quilez's Rainforest ShaderToy:
// https://www.shadertoy.com/view/4ttSWf
float noise(in vec3 x)
{
    vec3 p = floor(x);
    vec3 w = fract(x);

    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);

    float n = p.x + 317.0*p.y + 157.0*p.z;

    float a = hash1(n+0.0);
    float b = hash1(n+1.0);
    float c = hash1(n+317.0);
    float d = hash1(n+318.0);
    float e = hash1(n+157.0);
    float f = hash1(n+158.0);
    float g = hash1(n+474.0);
    float h = hash1(n+475.0);

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z);
}

float fbm(vec3 p) {
    vec3 q = p + ubo.totalTime * 0.5 * vec3(1.0, -0.2, -1.0);
    float g = noise(q);

    float f = 0.0;
    float scale = 0.5;
    float factor = 2.02;

    for (int i = 0; i < 6; i++) {
        f += scale * noise(q);
        q *= factor;
        factor += 0.21;
        scale *= 0.5;
    }

    return f;
}

// flag: 0 = ground, 1 = smoke
float scene(vec3 p, inout int flag) {
    float distance1 = sdSphere(p - vec3(5.0, 0.0, 0.0), 1.5);
    float distance2 = sdSphere(p + vec3(0, 1.0, 0.0), 1.0);
    float distance3 = sdSphere(p - vec3(-3, -1.0, 0.0), 1.0);
    float distance = min(min(distance1, distance2), distance3);
    float overlap = min(distance, sdPlane(p, vec3(0, -1, 0), 3));

    if (overlap == distance) {
        flag = 1;// Flag indicating the point is above the ground
    } else {
        flag = 0;// Flag indicating the point is on or below the ground
    }

    distance = overlap;

    // Add noise only when above the ground
    if (flag == 1) {
        vec3 fbmCoord = (p + 2 * vec3(ubo.totalTime, 0.0, ubo.totalTime)) / 1.5;
        float f = 5.0 * fbm(fbmCoord / 3.2);
        return -distance + fbm(p);
    } else {
        return -distance;
    }
}

float lightmarch(vec3 position, vec3 rayDirection, int flag) {
    vec3 sunDirection = normalize(ubo.sunPosition);
    float totalDensity = 0.0;
    float marchSize = 0.03;

    for (int step = 0; step < MAX_STEPS_LIGHTS; step++) {
        position += sunDirection * marchSize * float(step);

        float lightSample = scene(position, flag);
        if (flag == 0) {
            return BeersLaw(lightSample, 1);
        }


        totalDensity += lightSample;
    }

    float transmittance = BeersLaw(totalDensity, ABSORPTION_COEFFICIENT);
    return transmittance;
}

float softshadow(in vec3 ro, in vec3 rd)
{
    float res = 1.0;
    int flag  = 0;
    for (float t=Tmin; t<Tmax;)
    {
        float h = -scene(ro + rd*t, flag);
        if (h<0.001)
        return 0.0;
        res = min(res, K*h/t);
        t += h;
    }
    return res;
}

float raymarch(vec3 rayOrigin, vec3 rayDirection, float offset) {
    int flag = 0;
    float depth = 0.0;
    depth += MARCH_SIZE * offset + EPSILON;
    vec3 p = rayOrigin + depth * rayDirection;
    vec3 sunDirection = normalize(ubo.sunPosition);

    float totalTransmittance = 1.0;
    float lightEnergy = 0.0;

    float phase = HenyeyGreenstein(SCATTERING_ANISO, dot(rayDirection, sunDirection));

    for (int i = 0; i < MAX_STEPS; i++) {
        float density = scene(p, flag);

        // We only draw the density if it's greater than 0
        if (density > 0.0) {
            float lightTransmittance = lightmarch(p, rayDirection, flag);
            float luminance = 0.025 + density * phase;
            float sd = softshadow(p, normalize(ubo.sunPosition - p));

            totalTransmittance *= lightTransmittance;
            if (flag == 0) {
                lightEnergy += totalTransmittance * sd * 0.5 * density;
            } else {
                lightEnergy += totalTransmittance * luminance * sd * 0.5;
            }
        }

        depth += MARCH_SIZE;
        p = rayOrigin + depth * rayDirection;
    }

    return clamp(lightEnergy, 0.0, 1.0);
}

void main() {
    vec2 screenSize = imageSize(storageTexture);
    float horizontalCoefficient = (2.0 * float(gl_GlobalInvocationID.x) / screenSize.x) - 1.0;
    float verticalCoefficient = (2.0 * float(gl_GlobalInvocationID.y) / screenSize.y) - 1.0;

    // hard coded camera position
    vec3 ro = ubo.cameraPosition;
    vec3 rd = normalize(vec3(horizontalCoefficient, verticalCoefficient, -1.0));

    // Sun and Sky
    vec3 sunColor = vec3(1.0, 0.8, 0.6);
    vec3 sunDirection = normalize(ubo.sunPosition);
    float sun = clamp(dot(sunDirection, rd), 0.0, 1.0);
    // Base sky color
    vec3 color = vec3(0.7, 0.7, 0.90);
    // Add vertical gradient
    color -= 0.8 * vec3(0.90, 0.75, 0.90) * rd.y;
    // Add sun color to sky
    color += 0.5 * vec3(1.0, 0.5, 0.3) * pow(sun, 10.0);
    float blueNoise = texture(blueNoiseTexture, gl_GlobalInvocationID.xy / 1024).r;
    float offset = fract(blueNoise + float(ubo.frame%32) / sqrt(0.5));

    // Cloud
    float res = raymarch(ro, rd, offset);
    color = color + sunColor * res;
    color = pow(color, vec3(1.8));
    imageStore(storageTexture, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}
